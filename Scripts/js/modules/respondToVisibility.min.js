"use strict";function respondToVisibility(n,t){function r(n){var i={root:h,rootMargin:s+"px 0px"},r=new IntersectionObserver(function(i,r){i.forEach(function(i){i.isIntersecting&&(t(n),o&&r.disconnect())})},i);r.observe(n)}var i=arguments.length<=2||arguments[2]===undefined?{}:arguments[2],u=i.once,o=u===undefined?!0:u,f=i.offset,s=f===undefined?0:f,e=i.root,h=e===undefined?null:e;switch(typeof n){case"string":document.querySelectorAll(n).forEach(function(n){return r(n)});break;case"object":if(n.nodeName){r(n);break}if(n[0].nodeName){n.forEach(function(n){return r(n)});break}default:throw new Error('please pass an html element or a valid query string to "respondToVisibility" funtion');}}function isInViewport(n,t,i){var r=new IntersectionObserver(function(n,r){n.forEach(function(n){n.isIntersecting?(t(n.target),r.unobserve(n.target)):i(n.target)})},{threshold:.1});r.observe(n)}window.respondToVisibility=respondToVisibility;window.isInViewport=isInViewport;